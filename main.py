import os
import logging
from openai import OpenAI
from dotenv import load_dotenv
import telebot
from telebot import types
from gtts import gTTS
import azure.cognitiveservices.speech as speechsdk
from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
AZURE_SPEECH_KEY = os.getenv("AZURE_SPEECH_KEY")
AZURE_REGION = os.getenv("AZURE_REGION")
MONGO_URI = os.getenv("MONGO_URI")

uri = MONGO_URI

mongo_client = MongoClient(uri, server_api=ServerApi('1'))
db = mongo_client.translate
collection = db.words


user_states = {}

try:
    mongo_client.admin.command('ping')
    print("Pinged your deployment. You successfully connected to MongoDB!")
except Exception as e:
    print(e)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
bot = telebot.TeleBot(TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)

direction_map = {
    "ru_en": {"source": "russian", "target": "english"},
    "en_ru": {"source": "english", "target": "russian"},
    "ru_ka": {"source": "russian", "target": "georgian"},
    "ka_ru": {"source": "georgian", "target": "russian"},
    "ru_tr": {"source": "russian", "target": "turkey"},
    "tr_ru": {"source": "turkey", "target": "russian"}
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
def get_translate_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.row("–†—É—Å—Å–∫–∏–π ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π")
    keyboard.row("–†—É—Å—Å–∫–∏–π ‚Üí –ì—Ä—É–∑–∏–Ω—Å–∫–∏–π", "–ì—Ä—É–∑–∏–Ω—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π")
    keyboard.row("–†—É—Å—Å–∫–∏–π ‚Üí –¢—É—Ä–µ—Ü–∫–∏–π", "–¢—É—Ä–µ—Ü–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π")
    keyboard.row("üîô –ù–∞–∑–∞–¥")
    return keyboard


@bot.message_handler(commands=['start'])
def handle_start(message):
    user_states[message.chat.id] = {}
    bot.send_message(
        message.chat.id,
        "üèÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:",
        reply_markup=get_translate_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@bot.message_handler(func=lambda message: message.text in ["–†—É—Å—Å–∫–∏–π ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π",
                                                           "–†—É—Å—Å–∫–∏–π ‚Üí –ì—Ä—É–∑–∏–Ω—Å–∫–∏–π", "–ì—Ä—É–∑–∏–Ω—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π",
                                                           "–†—É—Å—Å–∫–∏–π ‚Üí –¢—É—Ä–µ—Ü–∫–∏–π", "–¢—É—Ä–µ—Ü–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π", "üîô –ù–∞–∑–∞–¥"])
def handle_lang_selection(message):
    chat_id = message.chat.id
    text = message.text

    if text == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(chat_id, "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=get_translate_keyboard())
        return

    lang_map = {
        "–†—É—Å—Å–∫–∏–π ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π": "ru_en",
        "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π": "en_ru",
        "–†—É—Å—Å–∫–∏–π ‚Üí –ì—Ä—É–∑–∏–Ω—Å–∫–∏–π": "ru_ka",
        "–ì—Ä—É–∑–∏–Ω—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π": "ka_ru",
        "–†—É—Å—Å–∫–∏–π ‚Üí –¢—É—Ä–µ—Ü–∫–∏–π": "ru_tr",
        "–¢—É—Ä–µ—Ü–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π": "tr_ru"
    }

    user_states[chat_id] = {"direction": lang_map[text]}
    bot.send_message(chat_id, "üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=types.ReplyKeyboardRemove())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text(message):
    chat_id = message.chat.id
    if message.text.startswith('/'):
        return

    if 'direction' not in user_states.get(chat_id, {}):
        bot.send_message(chat_id, "‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —á–µ—Ä–µ–∑ /start", reply_markup=get_translate_keyboard())
        return

    try:
        msg = bot.send_message(chat_id, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
        direction = user_states[chat_id]['direction']
        translated = translate_text(message.text, direction)
        audio_file = generate_tts(translated, direction)

        bot.edit_message_text(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥:\n{translated}", chat_id, msg.message_id)
        with open(audio_file, 'rb') as audio:
            bot.send_voice(chat_id, audio)

        user_states[chat_id]['original_text'] = message.text
        user_states[chat_id]['translated_text'] = translated
        bot.send_message(chat_id, "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –ú–æ–Ω–≥–æ? –ù–∞–ø–∏—à–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç.")

    except Exception as e:
        logger.error(f"Text error: {e}")
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞")




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    chat_id = message.chat.id
    if 'direction' not in user_states.get(chat_id, {}):
        bot.send_message(chat_id, "‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —á–µ—Ä–µ–∑ /start", reply_markup=get_translate_keyboard())
        return

    try:
        msg = bot.send_message(chat_id, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ...")
        file_info = bot.get_file(message.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        with open('voice.ogg', 'wb') as f:
            f.write(downloaded_file)

        text = transcribe_audio('voice.ogg')
        translated = translate_text(text, user_states[chat_id]['direction'])
        audio_file = generate_tts(translated, user_states[chat_id]['direction'])

        bot.edit_message_text(
            f"üîä –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}\n\n‚úÖ –ü–µ—Ä–µ–≤–æ–¥:\n{translated}",
            chat_id,
            msg.message_id
        )
        with open(audio_file, 'rb') as audio:
            bot.send_voice(chat_id, audio)

        user_states[chat_id]['original_text'] = text
        user_states[chat_id]['translated_text'] = translated
        bot.send_message(chat_id, "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –ú–æ–Ω–≥–æ? –ù–∞–ø–∏—à–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç.")

    except Exception as e:
        logger.error(f"Voice error: {e}")
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ")




def translate_text(text: str, direction: str) -> str:
    lang_map = {
        "ru_en": ("—Ä—É—Å—Å–∫–∏–π", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π"),
        "en_ru": ("–∞–Ω–≥–ª–∏–π—Å–∫–∏–π", "—Ä—É—Å—Å–∫–∏–π"),
        "ru_ka": ("—Ä—É—Å—Å–∫–∏–π", "–≥—Ä—É–∑–∏–Ω—Å–∫–∏–π"),
        "ka_ru": ("–≥—Ä—É–∑–∏–Ω—Å–∫–∏–π", "—Ä—É—Å—Å–∫–∏–π"),
        "ru_tr": ("—Ä—É—Å—Å–∫–∏–π", "—Ç—É—Ä–µ—Ü–∫–∏–π"),
        "tr_ru": ("—Ç—É—Ä–µ—Ü–∫–∏–π", "—Ä—É—Å—Å–∫–∏–π"),
    }

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "system", "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Å {lang_map[direction][0]} –Ω–∞ {lang_map[direction][1]}"},
                      {"role": "user", "content": text}]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"Translation error: {e}")
        raise


def generate_tts(text: str, direction: str) -> str:
    if direction in ["ru_ka", "ka_ru"]:
        return generate_azure_tts(text)

    lang_codes = {
        "ru_en": "en", "en_ru": "ru",
        "ru_ka": "ka", "ka_ru": "ru",
        "ru_tr": "tr", "tr_ru": "ru"
    }

    try:
        tts = gTTS(text=text, lang=lang_codes[direction], slow=False)
        filename = f"tts_{direction}_{hash(text)}.mp3"
        tts.save(filename)
        return filename
    except Exception as e:
        logger.error(f"TTS error: {e}")
        raise


def generate_azure_tts(text: str) -> str:
    try:
        speech_config = speechsdk.SpeechConfig(subscription=AZURE_SPEECH_KEY, region=AZURE_REGION)
        audio_config = speechsdk.audio.AudioOutputConfig(use_default_speaker=True)

        synthesizer = speechsdk.SpeechSynthesizer(speech_config=speech_config, audio_config=audio_config)
        result = synthesizer.speak_text_async(text).get()

        if result.reason == speechsdk.ResultReason.SynthesizingAudioCompleted:
            filename = f"azure_tts_{hash(text)}.wav"
            with open(filename, 'wb') as audio_file:
                audio_file.write(result.audio_data)
            return filename
        else:
            raise Exception(f"Error synthesizing speech: {result.error_details}")

    except Exception as e:
        logger.error(f"Azure TTS error: {e}")
        raise


def transcribe_audio(file_path: str) -> str:
    try:
        with open(file_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                file=audio_file,
                model="whisper-1"
            )
        return transcript.text
    except Exception as e:
        logger.error(f"Transcription error: {e}")
        raise


@bot.message_handler(func=lambda message: message.text.lower() in ['–¥–∞', '–Ω–µ—Ç'])
def handle_save_answer(message):
    chat_id = message.chat.id
    user_state = user_states.get(chat_id, {})

    if message.text.lower() == '–Ω–µ—Ç':
        bot.send_message(chat_id, "–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        original = user_state.get('original_text')
        translated = user_state.get('translated_text')
        direction = user_state.get('direction')

        if not all([original, translated, direction]):
            raise ValueError("Missing translation data")

        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –±–∞–∑—ã
        doc = {
            "russian": "",
            "english": "",
            "georgian": "",
            "turkey": "",
            "example": ""
        }

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
        mapping = direction_map.get(direction)
        if mapping:
            doc[mapping['source']] = original
            doc[mapping['target']] = translated

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB
        collection.insert_one(doc)
        bot.send_message(chat_id, "‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ!")

    except Exception as e:
        logger.error(f"MongoDB save error: {e}")
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞")
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        keys = ['original_text', 'translated_text']
        for key in keys:
            if key in user_states[chat_id]:
                del user_states[chat_id][key]


if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling(none_stop=True)
